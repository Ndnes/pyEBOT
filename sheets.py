import gspread  # Module needed for google sheets.
import csv
from oauth2client.service_account import ServiceAccountCredentials
# from pprint import pprint  # Print pretty messages.

# Get scope for google sheets.
scope = [
    "https://spreadsheets.google.com/feeds",
    'https://www.googleapis.com/auth/spreadsheets',
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"]

# Credentials file from Google Cloud Console. This is generated by Google Drive
# API and allows Python to connect to your Google Drive.
# Make sure to add this file to gitignore.
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "creds.json", scope
)

# Make a Google Sheets client and connect it to your Google Drive.
client = gspread.authorize(creds)

"""
sheet = client.open("pyEBOT test sheet").sheet1


data = sheet.get_all_records()

pprint(data)
"""

spreadSheet = client.open("EVENTS")
sheet = spreadSheet.worksheet('Discord Parsed Data')
# TODO: Get the correct daymar sheet
daymarSpreadSheet = client.open_by_key(
    '1oRsiSXzeJKMczrEZtEhDLcnC_tPNjtLD7n3MqftfZbc'
)
daymarSheet = daymarSpreadSheet.worksheet('SECURITY')


# Functions
def getCell(rowIndex, colIndex, daymar=False):
    if daymar:
        cell = daymarSheet.cell(rowIndex, colIndex)
    else:
        cell = sheet.cell(rowIndex, colIndex)
    return cell.value


def setCell(rowIndex, colIndex, value, daymar=False):
    if daymar:
        daymarSheet.update_cell(rowIndex, colIndex, value)
    else:
        sheet.update_cell(rowIndex, colIndex, value)


def getAll(daymar=False):

    if daymar:
        return daymarSheet.get_all_records()
    else:
        return sheet.get_all_records()


def getCol(index, daymar=False):

    if daymar:
        return daymarSheet.col_values(index)
    else:
        return sheet.col_values(index)


def getRow(rowNum, daymar=False):

    if daymar:
        data = daymarSheet.row_values(rowNum)
    else:
        data = sheet.row_values(rowNum)
    return data


def deleteRows(startIndex, rowNum=1, daymar=False):

    if rowNum < 1:
        return

    if daymar:
        daymarSheet.delete_dimension(
            'ROWS', startIndex, startIndex + rowNum - 1
        )
    else:
        sheet.delete_dimension('ROWS', startIndex, startIndex + rowNum - 1)


def exportCsv(fileName):

    with open(fileName, 'w', newline='') as fp:
        writer = csv.writer(fp)
        writer.writerows(daymarSheet.get_all_values())

        return fp


# This must run periodically to avoid loosing authentication. Timeout is 1hr.
def refreshAuth():
    client.login()

# TODO: Encapsulate this code within a class to make it compatible with sphinx
# documentation.
